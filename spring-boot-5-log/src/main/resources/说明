1、spring-boot默认使用Commons Logging来输出日志

2、也支持其他日志类，如：Java Util Logging，Log4J, Log4J2和Logback等

3、默认输出的日志格式：
	2016-04-13 08:23:50.120  INFO 37397 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {4.3.11.Final}
解释：
	(1)时间日期 ― 精确到毫秒
	(2)日志级别 ― ERROR, WARN, INFO, DEBUG or TRACE
	(3)进程ID
	(4)分隔符 : " --- "标识实际日志的开始
	(5)线程名 : "[]"方括号括起来（可能会截断控制台输出）
	(6)Logger名 : 通常使用源代码的类名
	(7)日志内容
	
4、控制台输出
	(1)spring-boot默认只输出ERROR、WARN、INFO级别日志到控制台
	(2)在运行命令后加上"--debug"标记，可以输出更多内容。如：java -jar myapp.jar --debug
	(3)在配置文件application.properties中加入debug=true，作用同上
	
5、彩色输出
	(1)如果你的终端支持ANSI，那么可以输出彩色日志
	(2)在配置文件application.properties中设置spring.output.ansi.enabled=true
	
6、文件输出
	(1)spring-boot默认只会输出到控制台，如果想输出到文件中，那么在配置文件application.properties中配置logging.file或logging.path属性
	(2)logging.file: 设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
	(3)logging.path: 设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log
	注意：
	(1)日志文件会在10Mb大小的时候被截断，产生新的日志文件。
	(2)默认的日志级别为ERROR、WARN、INFO
	
7、级别控制
	(1)在Spring Boot中，只需要在application.properties中进行配置完成日志记录的级别控制。
	(2)配置格式：
		logging.level.* = LEVEL
		
		其中，logging.level：日志级别控制前缀，*为包名或Logger名
				LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
		例如：
			(1)logging.level.com.didispace=DEBUG：com.didispace包下所有class以DEBUG级别输出
			(2)logging.level.root=WARN：root日志以WARN级别输出
			
8、自定义日志配置
	(1)将日志的配置文件写到专门的配置文件中，而不是在application.properties中
	(2)根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
		Logback: logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
		Log4j: log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
		Log4j2: log4j2-spring.xml, log4j2.xml
		JDK (Java Util Logging): logging.properties
	注意：Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml）
	
9、自定义输出格式
	(1)在Spring Boot中可以通过在application.properties配置如下参数控制输出格式：
		logging.pattern.console: 定义输出到控制台的样式（不支持JDK Logger）
		logging.pattern.file: 定义输出到文件的样式（不支持JDK Logger）